import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;

public class WordAnalyze {
	// ï¿½æ´¢ï¿½Ê·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½token
	public ArrayList<Token> TokenList = new ArrayList<>();

	// ï¿½Ð¶Ïµï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½Ä¸
	private boolean isLetter(char curcharacter) {
		if ((curcharacter >= 'a' && curcharacter <= 'z') || (curcharacter >= 'A' && curcharacter <= 'Z')) {
			return true;
		} else
			return false;
	}

	// ï¿½Ð¶Ïµï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	private boolean isDigit(char curcharacter) {
		if (curcharacter >= '0' && curcharacter <= '9') {
			return true;
		} else
			return false;
	}

	// ï¿½Ð¶Ïµï¿½Ç°ï¿½ï¿½ï¿½ï¿½ï¿½Ç·ï¿½Îªï¿½Ø¼ï¿½ï¿½Ö£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½tokenlist
	private boolean isKeyword(String word, int line) {
		switch (word) {
		case "break":
			TokenList.add(new Token(TokenType.BREAK, word, line));
			return true;
		case "if":
			TokenList.add(new Token(TokenType.IF, word, line));
			return true;
		case "else":
			TokenList.add(new Token(TokenType.ELSE, word, line));
			return true;
		case "while":
			TokenList.add(new Token(TokenType.WHILE, word, line));
			return true;
		case "for":
			TokenList.add(new Token(TokenType.FOR, word, line));
			return true;
		case "int":
			TokenList.add(new Token(TokenType.INT, word, line));
			return true;
		case "float":
			TokenList.add(new Token(TokenType.FLOAT, word, line));
			return true;
		case "bool":
			TokenList.add(new Token(TokenType.BOOL, word, line));
			return true;
		case "return":
			TokenList.add(new Token(TokenType.RETURN, word, line));
			return true;
		case "main":
			TokenList.add(new Token(TokenType.MAIN, word, line));
			return true;
		default:
			return false;
		}
	}

	private void wordAnalyze(char[] words) {
		int line = 1;
		for (int i = 0; i < words.length; i++) {
			String word = "";
			if (isLetter(words[i])) {
				while (isLetter(words[i]) || isDigit(words[i])) {
					word += words[i];
					i++;
					if (i >= words.length)
						break; // ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½Ô½ï¿½ï¿½
				}
				i--;
				if (!isKeyword(word, line)) { // ï¿½Ð¶ï¿½ï¿½Ç·ï¿½Îªï¿½Ø¼ï¿½ï¿½ï¿½
					TokenList.add(new Token(TokenType.IDENTIFIER, word, line));
				}
			} else if (isDigit(words[i])) { // ï¿½ï¿½ï¿½ï¿½
				boolean point = false; // ï¿½ï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ÎªÐ¡ï¿½ï¿½ï¿½ï¿½
				int pointflag = 0; // Ð¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
				while (isDigit(words[i]) || point) {
					if (pointflag >= 2)
						break; // Í¨ï¿½ï¿½ï¿½Ð¶Ï¸ï¿½tokenï¿½ï¿½ï¿½ï¿½Ð¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¶ï¿½ï¿½Ç·ï¿½Î?ï¿½Ï·ï¿½Ð¡ï¿½ï¿½
					word += words[i];
					i++;
					if (i >= words.length)
						break; // ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½Ô½ï¿½ï¿½
					if (words[i] == '.') // ï¿½ï¿½ï¿½ï¿½ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ÎªÐ¡ï¿½ï¿½
					{
						point = true;
						pointflag++;
					} else {
						point = false;
					}
				}
				if (isLetter(words[i]) || point) { // ï¿½ï¿½ï¿½ï¿½ï¿½Ç°ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½Ä¸ï¿½ï¿½Ð¡ï¿½ï¿½ï¿½ï¿?,ï¿½ï¿½Ã³ï¿½ï¿½ï¿½ï¿½ï¿½Ô?Îªï¿½ï¿½ï¿½ï¿½
					word += words[i];
					TokenList.add(new Token(TokenType.ERROR, word, line));
				} else {
					i--;
					TokenList.add(new Token(TokenType.CONSTANT, word, line));
				}
			} else {
				switch (words[i]) {
				// ï¿½ï¿½ï¿½ï¿½ï¿?
				case '+':
					word += words[i];
					TokenList.add(new Token(TokenType.ADD, word, line));
					break;
				case '-':
					word += words[i];
					TokenList.add(new Token(TokenType.SUBSTRACT, word, line));
					break;
				case '*':
					word += words[i];
					TokenList.add(new Token(TokenType.MULTIPLY, word, line));
					break;
				case '/':
					word += words[i];
					if (i < words.length - 1) { // ï¿½Ð¶Ïµï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ï¿½Ñ¾ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä©Î²
						i++;
						if (words[i] == 10)
							line++; // ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½ï¿½
						if (words[i] == '=') { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½= ï¿½ï¿½Ê¶ï¿½ï¿½Îª<=
							word += words[i];
							TokenList.add(new Token(TokenType.MAEQ, word, line));
						} else if (words[i] == '/') { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ò½«»ï¿½ï¿½Ð·ï¿½Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½Ê¶ï¿½ï¿½Îª×¢ï¿½ï¿½,ï¿½Þ»ï¿½ï¿½Ð·ï¿½ï¿½ï¿½×¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿?
							while ((words[i] != 10) && (i != words.length - 1)) {
								i++;
								if (words[i] == 10)
									line++; // ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½ï¿½
							}
						} else { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¶ï¿½ï¿½Î?/
							i--;
							TokenList.add(new Token(TokenType.MAIOR, word, line));
						}
					} else
						TokenList.add(new Token(TokenType.MAIOR, word, line));
					break;
				case '>':
					word += words[i];
					if (i < words.length - 1) { // ï¿½Ð¶Ïµï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ï¿½Ñ¾ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä©Î²
						i++;
						if (words[i] == '=') { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½= ï¿½ï¿½Ê¶ï¿½ï¿½Îª<=
							word += words[i];
							TokenList.add(new Token(TokenType.MAEQ, word, line));
						} else { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¶ï¿½ï¿½Î?>
							i--;
							TokenList.add(new Token(TokenType.MAIOR, word, line));
						}
					} else
						TokenList.add(new Token(TokenType.MAIOR, word, line));
					break;
				case '<':
					word += words[i];
					if (i < words.length - 1) { // ï¿½Ð¶Ïµï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ï¿½Ñ¾ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä©Î²
						i++;
						if (words[i] == '=') { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½= ï¿½ï¿½Ê¶ï¿½ï¿½Îª>=
							word += words[i];
							TokenList.add(new Token(TokenType.MEEQ, word, line));
						} else if (words[i] == '>') { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½> ï¿½ï¿½Ê¶ï¿½ï¿½Îª<>
							word += words[i];
							TokenList.add(new Token(TokenType.UNEQ, word, line));
						} else { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¶ï¿½ï¿½Î?<
							i--;
							TokenList.add(new Token(TokenType.MAIOR, word, line));
						}
					} else
						TokenList.add(new Token(TokenType.MAIOR, word, line));
					break;
				case '=':
					word += words[i];
					if (i < words.length - 1) { // ï¿½Ð¶Ïµï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ï¿½Ñ¾ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä©Î²
						i++;
						if (words[i] == '=') { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½= ï¿½ï¿½Ê¶ï¿½ï¿½Îª==
							word += words[i];
							TokenList.add(new Token(TokenType.EQEQ, word, line));
						} else { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¶ï¿½ï¿½Î?=
							i--;
							TokenList.add(new Token(TokenType.EQUAL, word, line));
						}
					} else
						TokenList.add(new Token(TokenType.EQUAL, word, line));
					break;
				case '!':
					word += words[i];
					TokenList.add(new Token(TokenType.NOT, word, line));
					break;
				case '&':
					word += words[i];
					if (i < words.length - 1) { // ï¿½Ð¶Ïµï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ï¿½Ñ¾ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä©Î²
						i++;
						if (words[i] == '&') { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½& ï¿½ï¿½Ê¶ï¿½ï¿½Îª&&
							word += words[i];
							TokenList.add(new Token(TokenType.AND, word, line));
						} else { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¶ï¿½ï¿½Î?&
							i--;
							TokenList.add(new Token(TokenType.L_AND, word, line));
						}
					} else
						TokenList.add(new Token(TokenType.L_AND, word, line));
					break;
				case '|':
					word += words[i];
					if (i < words.length - 1) { // ï¿½Ð¶Ïµï¿½Ç°ï¿½Ö·ï¿½ï¿½Ç·ï¿½ï¿½Ñ¾ï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä©Î²
						i++;
						if (words[i] == '|') { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½| ï¿½ï¿½Ê¶ï¿½ï¿½Îª||
							word += words[i];
							TokenList.add(new Token(TokenType.AND, word, line));
						} else { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¶ï¿½ï¿½Îª|
							i--;
							TokenList.add(new Token(TokenType.L_AND, word, line));
						}
					} else
						TokenList.add(new Token(TokenType.L_AND, word, line));
					break;
				// ï¿½Ö½ï¿½ï¿?
				case '(':
					word += words[i];
					TokenList.add(new Token(TokenType.LEFT_PARENTHESIS, word, line));
					break;
				case ')':
					word += words[i];
					TokenList.add(new Token(TokenType.RIGHT_PARENTHESIS, word, line));
					break;
				case '[':
					word += words[i];
					TokenList.add(new Token(TokenType.L_SQUARE_BRACKET, word, line));
					break;
				case ']':
					word += words[i];
					TokenList.add(new Token(TokenType.R_SQUARE_BRACKET, word, line));
					break;
				case '{':
					word += words[i];
					TokenList.add(new Token(TokenType.L_BRACKET, word, line));
					break;
				case '}':
					word += words[i];
					TokenList.add(new Token(TokenType.R_BRACKET, word, line));
					break;
				// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				case ';':
					word += words[i];
					TokenList.add(new Token(TokenType.COLON, word, line));
					break;
				case ',':
					word += words[i];
					TokenList.add(new Token(TokenType.COMMA, word, line));
					break;
				case '#':
					word += words[i];
					TokenList.add(new Token(TokenType.STOP_SIGN, word, line));
					for (Token token : TokenList) { // ï¿½ï¿½Ê¶ï¿½ï¿½ï¿½ï¿½Ö¹ï¿½ï¿½Ê±ï¿½ï¿½ï¿½Ê·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä½ï¿½ï¿?
						token.tostring();
					}
					return;
				// ï¿½ï¿½ï¿½ï¿½ï¿½Õ¸ï¿½ï¿?
				case 32:
					break;
				// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð·ï¿½
				case 10:
					line++;
					break;
				// ï¿½ï¿½ï¿½ï¿½ï¿½Ø³ï¿½ï¿½Ð·ï¿½
				case 13:
					break;
				default:
					System.out.println("ï¿½ï¿½ï¿½ï¿½Î´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?" + words[i] + "    " + line);
					break;
				}
			}

		}
		for (Token token : TokenList) { // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½É¨ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½Ê·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä½ï¿½ï¿½
			token.tostring();
		}
		return;
	}

	public static void main(String args[]) throws Exception {
		File file = new File("D:\\data.txt");// ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½fileï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½FileReader
		// File fileout = new
		// File("D:\\dataout.txt");//ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½fileoutï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ø¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
		// PrintStream ps = new PrintStream(fileout);
		// System.setOut(ps);
		FileReader reader = new FileReader(file);// ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½fileReaderï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½BufferedReader
		int length = (int) file.length();
		// ï¿½ï¿½ï¿½ï¶¨ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½Ò?ï¿½à¶¨ï¿½ï¿½Ò»ï¿½ï¿½,ï¿½ï¿½Îªï¿½Ê·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç°ï¿½ï¿½È¡Ò»ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½
		// ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú¶ï¿½È¡ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Ö·ï¿½ï¿½Í»ï¿½ï¿½ï¿½ï¿½Ô½ï¿½ï¿½ï¿½ï¿½ì³?
		char buf[] = new char[length];
		reader.read(buf);
		reader.close();
		WordAnalyze analyze = new WordAnalyze();
		analyze.wordAnalyze(buf);
	}
}
